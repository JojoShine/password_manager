---
description: 
globs: 
alwaysApply: true
---
## 1-基础开发规则

### 命名规范

1. **一致性原则**：在整个项目中保持命名风格一致
2. **描述性命名**：名称应清晰表达其用途和含义
3. **避免缩写**：除非是广泛接受的缩写，否则使用完整词汇
4. **避免通用名称**：如 `data`、`info`、`manager` 等过于宽泛的名称
5. **长度适中**：名称应足够具体，但不过于冗长

### 代码结构

1. **单一职责原则**：每个函数、类或模块应只负责一个功能
2. **函数长度控制**：函数应保持简短，通常不超过 30-50 行
3. **参数数量限制**：函数参数通常不超过 3-4 个，更多参数考虑使用对象传递
4. **嵌套层级控制**：控制条件和循环的嵌套深度，通常不超过 3 层
5. **提前返回**：对于错误条件，尽早返回而非使用嵌套条件
6. **单文件代码量限制**：单个文件的代码行数非特殊情况不要超过500行

### 文件组织

1. **模块化**：按功能或领域划分文件和目录
2. **相关性聚合**：相关功能放在同一模块或目录中
3. **分层架构**：清晰分离不同层级的代码（如 UI、业务逻辑、数据访问）
4. **一致的文件结构**：同类型文件保持一致的内部结构
5. **导入顺序**：遵循一致的导入顺序（如标准库、第三方库、本地模块）

### 代码质量

1. **可读性优先**：代码应易于阅读和理解
2. **注释适度**：注释解释"为什么"而非"是什么"
3. **代码文档**：为公共 API 和复杂逻辑提供文档
4. **避免重复**：遵循 DRY 原则（Don't Repeat Yourself）
5. **测试覆盖**：关键功能应有单元测试覆盖
6. **性能考虑**：在保持可读性的前提下考虑性能优化

### 接口定义规范

1. **明确契约**：清晰定义输入、输出和异常
2. **最小暴露**：仅暴露必要的方法和属性
3. **一致的返回值**：相似操作返回相似结构
4. **参数验证**：在接口边界验证输入
5. **版本管理**：对公共 API 进行版本控制
6. **向后兼容**：尽可能保持接口向后兼容

### 异常定义与处理

1. **异常分类**：区分业务异常和技术异常
2. **具体异常**：使用或创建具体的异常类型而非通用异常
3. **异常信息**：提供有助于诊断的详细异常信息
4. **异常处理原则**：在适当的层级处理异常
5. **资源释放**：确保异常情况下资源正确释放
6. **不吞没异常**：不捕获异常后无任何处理

### 配置与环境

1. **环境分离**：区分开发、测试、生产环境配置
2. **外部化配置**：将配置从代码中分离
3. **敏感信息保护**：不在代码中硬编码敏感信息
4. **默认安全**：默认配置应当是安全的

### 日志规范

1. **日志级别**：正确使用不同日志级别（DEBUG, INFO, WARN, ERROR）
2. **结构化日志**：使用结构化格式便于解析
3. **上下文信息**：包含足够的上下文信息以便问题诊断
4. **敏感数据保护**：不记录敏感信息