name: 构建桌面应用

on:
  push:
    tags:
      - 'v*'  # 当推送标签时触发（如 v1.0.0）
  workflow_dispatch:  # 手动触发

jobs:
  build-windows:
    name: 构建Windows版本
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'
          
      - name: 启用Windows桌面支持
        run: flutter config --enable-windows-desktop
        
      - name: 获取依赖
        run: flutter pub get
        
      - name: 构建Windows应用
        run: flutter build windows --release
        
      - name: 创建Windows安装包
        run: |
          mkdir windows-release
          xcopy "build\windows\x64\runner\Release\*" "windows-release\" /E /I /Y
          
      - name: 打包为ZIP
        run: |
          cd windows-release
          tar -czf ../PasswordManager-Windows.zip *
          
      - name: 上传Windows构建产物
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: PasswordManager-Windows.zip

  build-macos:
    name: 构建macOS版本
    runs-on: macos-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'
          
      - name: 启用macOS桌面支持
        run: flutter config --enable-macos-desktop
        
      - name: 获取依赖
        run: flutter pub get
        
      - name: 构建macOS应用
        run: |
          echo "=== 开始构建 macOS 应用 ==="
          flutter build macos --release --verbose
          echo "=== 构建完成，检查输出 ==="
          echo "构建输出目录结构:"
          ls -la build/macos/ 2>/dev/null || echo "build/macos 目录不存在"
        
      - name: 检查构建产物
        run: |
          echo "=== 检查构建产物 ==="
          echo "当前目录: $(pwd)"
          
          echo "=== 完整的 build 目录结构 ==="
          find build -type d 2>/dev/null | head -20 || echo "build 目录不存在"
          
          echo "=== 查找所有 .app 文件 ==="
          find build -name "*.app" -type d 2>/dev/null || echo "未找到 .app 目录"
          
          echo "=== 检查标准 Release 目录 ==="
          if [ -d "build/macos/Build/Products/Release/" ]; then
            echo "Release 目录存在，内容如下:"
            ls -la "build/macos/Build/Products/Release/"
          else
            echo "标准 Release 目录不存在"
          fi
          
          echo "=== 检查其他可能的构建输出位置 ==="
          find build -name "*password_manager*" -o -name "*Runner*" 2>/dev/null || echo "未找到相关文件"
          
          echo "=== 检查是否有可执行文件 ==="
          find build -type f -executable 2>/dev/null | head -10 || echo "未找到可执行文件"
        
      - name: 创建DMG安装包
        run: |
          echo "=== 创建 DMG 安装包 ==="
          
          # 首先检查所有可能的路径
          echo "检查可能的 .app 文件路径："
          echo "1. 标准路径: build/macos/Build/Products/Release/"
          ls -la "build/macos/Build/Products/Release/" 2>/dev/null || echo "路径1不存在"
          
          echo "2. 查找所有 .app 文件:"
          find build -name "*.app" -type d 2>/dev/null || echo "未找到任何 .app 文件"
          
          # 尝试多个可能的路径
          POSSIBLE_PATHS=(
            "build/macos/Build/Products/Release/password_manager.app"
            "build/macos/Build/Products/Release/Runner.app"
            "build/macos/Build/Products/Release/*.app"
          )
          
          APP_PATH=""
          
          # 先尝试预定义路径
          for path in "${POSSIBLE_PATHS[@]}"; do
            if [ -d "$path" ] 2>/dev/null; then
              APP_PATH="$path"
              echo "找到预定义路径的 app 文件: $APP_PATH"
              break
            fi
          done
          
          # 如果预定义路径都不存在，使用 find 查找
          if [ -z "$APP_PATH" ]; then
            APP_PATH=$(find build -name "*.app" -type d | head -1)
          fi
          
          if [ -n "$APP_PATH" ] && [ -d "$APP_PATH" ]; then
            echo "最终找到 app 文件: $APP_PATH"
            APP_NAME=$(basename "$APP_PATH" .app)
            echo "应用名称: $APP_NAME"
            
            # 验证 .app 结构
            echo "验证 .app 文件结构:"
            ls -la "$APP_PATH/" 2>/dev/null || echo "无法列出 .app 内容"
            
            # 创建 DMG
            echo "创建 DMG 文件..."
            hdiutil create -volname "密码管理器" -srcfolder "$APP_PATH" -ov -format UDZO "密码管理器-macOS.dmg"
            
            # 验证 DMG 文件
            if [ -f "密码管理器-macOS.dmg" ]; then
              echo "DMG 文件创建成功!"
              ls -la "密码管理器-macOS.dmg"
              # 重命名为英文名以避免上传问题
              mv "密码管理器-macOS.dmg" "PasswordManager-macOS.dmg"
            else
              echo "DMG 文件创建失败!"
              exit 1
            fi
          else
            echo "错误: 未找到任何 .app 文件"
            echo "详细的 build 目录结构:"
            find build -type f -name "*" | head -30
            echo "所有目录结构:"
            find build -type d | head -20
            exit 1
          fi
          
      - name: 上传macOS构建产物
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: PasswordManager-macOS.dmg

  create-release:
    name: 创建发布
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 下载Windows构建产物
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: ./artifacts
          
      - name: 下载macOS构建产物
        uses: actions/download-artifact@v4
        with:
          name: macos-release
          path: ./artifacts
          
      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/PasswordManager-Windows.zip
            ./artifacts/PasswordManager-macOS.dmg
          body: |
            ## 📦 密码管理器 ${{ github.ref_name }}
            
            ### 🚀 功能特性
            - ✅ 密码管理和生成
            - ✅ 数据加密导入导出
            - ✅ 深色模式支持
            - ✅ 自定义字段支持
            - ✅ 分类管理
            
            ### 💾 下载说明
            - **Windows用户**: 下载 `PasswordManager-Windows.zip`，解压后运行 `password_manager.exe`
            - **macOS用户**: 下载 `PasswordManager-macOS.dmg`，双击安装
            
            ### 🔧 系统要求
            - Windows 10/11 (x64)
            - macOS 10.14+ (Intel/Apple Silicon)
            
            ---
            ⭐ 如果觉得好用，请给项目点个星！
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 