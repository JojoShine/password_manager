name: Desktop App Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'
          
      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop
        
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build Windows app
        run: flutter build windows --release
        
      - name: Create Windows package
        run: |
          mkdir windows-release
          xcopy "build\windows\x64\runner\Release\*" "windows-release\" /E /I /Y
          
      - name: Create ZIP package
        run: |
          cd windows-release
          tar -czf ../PasswordManager-Windows.zip *
          
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: PasswordManager-Windows.zip

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'
          
      - name: Enable macOS desktop
        run: flutter config --enable-macos-desktop
        
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build macOS app
        run: |
          echo "=== Building macOS app ==="
          flutter build macos --release --verbose
          echo "=== Build completed ==="
          
      - name: Debug build output
        run: |
          echo "=== Checking build output ==="
          echo "Current directory: $(pwd)"
          
          echo "=== Build directory structure ==="
          find build -type d 2>/dev/null | head -20 || echo "build directory not found"
          
          echo "=== Looking for .app files ==="
          find build -name "*.app" -type d 2>/dev/null || echo "No .app files found"
          
          echo "=== Checking standard Release directory ==="
          if [ -d "build/macos/Build/Products/Release/" ]; then
            echo "Release directory exists:"
            ls -la "build/macos/Build/Products/Release/"
          else
            echo "Standard Release directory not found"
          fi
          
          echo "=== Looking for password_manager or Runner files ==="
          find build -name "*password_manager*" -o -name "*Runner*" 2>/dev/null || echo "No related files found"
        
      - name: Create DMG
        run: |
          echo "=== Creating DMG package ==="
          
          # Try multiple possible paths
          POSSIBLE_PATHS=(
            "build/macos/Build/Products/Release/password_manager.app"
            "build/macos/Build/Products/Release/Runner.app"
          )
          
          APP_PATH=""
          
          # Check predefined paths first
          for path in "${POSSIBLE_PATHS[@]}"; do
            if [ -d "$path" ]; then
              APP_PATH="$path"
              echo "Found app at predefined path: $APP_PATH"
              break
            fi
          done
          
          # If no predefined path works, use find
          if [ -z "$APP_PATH" ]; then
            APP_PATH=$(find build -name "*.app" -type d | head -1)
          fi
          
          if [ -n "$APP_PATH" ] && [ -d "$APP_PATH" ]; then
            echo "Final app path: $APP_PATH"
            APP_NAME=$(basename "$APP_PATH" .app)
            echo "App name: $APP_NAME"
            
            # Verify .app structure
            echo "Verifying .app structure:"
            ls -la "$APP_PATH/" 2>/dev/null || echo "Cannot list .app contents"
            
            # Create DMG with English names only
            echo "Creating DMG file..."
            hdiutil create -volname "PasswordManager" -srcfolder "$APP_PATH" -ov -format UDZO "PasswordManager-macOS.dmg"
            
            # Verify DMG creation
            if [ -f "PasswordManager-macOS.dmg" ]; then
              echo "DMG file created successfully!"
              ls -la "PasswordManager-macOS.dmg"
            else
              echo "DMG file creation failed!"
              exit 1
            fi
          else
            echo "Error: No .app file found"
            echo "Detailed build directory structure:"
            find build -type f | head -30
            echo "All directories:"
            find build -type d | head -20
            exit 1
          fi
          
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-release
          path: PasswordManager-macOS.dmg

  create-release:
    name: Create Release
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: ./artifacts
          
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-release
          path: ./artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/PasswordManager-Windows.zip
            ./artifacts/PasswordManager-macOS.dmg
          body: |
            ## üì¶ Password Manager ${{ github.ref_name }}
            
            ### üöÄ Features
            - ‚úÖ Password management and generation
            - ‚úÖ Encrypted data import/export
            - ‚úÖ Dark mode support
            - ‚úÖ Custom fields support
            - ‚úÖ Category management
            
            ### üíæ Download Instructions
            - **Windows users**: Download `PasswordManager-Windows.zip`, extract and run `password_manager.exe`
            - **macOS users**: Download `PasswordManager-macOS.dmg`, double-click to install
            
            ### üîß System Requirements
            - Windows 10/11 (x64)
            - macOS 10.14+ (Intel/Apple Silicon)
            
            ---
            ‚≠ê If you find this useful, please star the project!
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 